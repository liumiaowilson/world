[
    {
        "name": "Memento",
        "definition": "Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_memento.png",
    },
    {
        "name": "Chain of Responsibility",
        "definition": "Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_chain_of_responsibility.png",
    },
    {
        "name": "Observer",
        "definition": "Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_observer.png",
    },
    {
        "name": "Command",
        "definition": "Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_command.png",
    },
    {
        "name": "State",
        "definition": "Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_state.png",
    },
    {
        "name": "Interpreter",
        "definition": "Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_interpreter.png",
    },
    {
        "name": "Strategy",
        "definition": "Define a family of algorithms, encapsulate each one, and make them interchangeable. Lets the algorithm vary independently from clients that use it.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_strategy.png",
    },
    {
        "name": "Iterator",
        "definition": "Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_iterator.png",
    },
    {
        "name": "Template Method",
        "definition": "Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_template_method.png",
    },
    {
        "name": "Mediator",
        "definition": "Define an object that encapsulates how a set of objects interact. Promotes loose coupling by keeping objects from referring to each other explicitly and it lets you vary their interactions independently.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_mediator.png",
    },
    {
        "name": "Visitor",
        "definition": "Represent an operation to be performed on the elements of an object structure. Lets you define a new operation without changing the classes of the elements on which it operates.",
        "type": "Behavioral",
        "image": "/images/design_pattern/gof_visitor.png",
    },
    {
        "name": "Adapter",
        "definition": "Convert the interface of a class into another interface clients expect. Lets classes work together that couldn't otherwise because of incompatible interfaces.",
        "type": "Structural",
        "image": "/images/design_pattern/gof_adapter.png",
    },
    {
        "name": "Proxy",
        "definition": "Provide a surrogate or placeholder for another object to control access to it.",
        "type": "Structural",
        "image": "/images/design_pattern/gof_proxy.png",
    },
    {
        "name": "Bridge",
        "definition": "Decouple an abstraction from its implementation so that the two can vary independently.",
        "type": "Structural",
        "image": "/images/design_pattern/gof_bridge.png",
    },
    {
        "name": "Abstract Factory",
        "definition": "Provides an interface for creating families of related or dependent objects without specifying their concrete class.",
        "type": "Creational",
        "image": "/images/design_pattern/gof_abstract_factory.png",
    },
    {
        "name": "Composite",
        "definition": "Compose objects into tree structures to represent part-whole hierarchies. Lets clients treat individual objects and compositions of objects uniformly",
        "type": "Structural",
        "image": "/images/design_pattern/gof_composite.png",
    },
    {
        "name": "Builder",
        "definition": "Separate the construction of a complex object from its representing so that the same construction process can create different representations.",
        "type": "Creational",
        "image": "/images/design_pattern/gof_builder.png",
    },
    {
        "name": "Decorator",
        "definition": "Attach additional responsibilities to an object dynamically. Provide a flexible alternative to sub-classing for extending functionality.",
        "type": "Structural",
        "image": "/images/design_pattern/gof_decorator.png",
    },
    {
        "name": "Factory Method ",
        "definition": "Define an interface for creating an object, but let subclasses decide which class to instantiate. Lets a class defer instantiation to subclasses.",
        "type": "Creational",
        "image": "/images/design_pattern/gof_factory_method.png",
    },
    {
        "name": "Facade",
        "definition": "Provide a unified interface to a set of interfaces in a subsystem. Defines a highlevel interface that makes the subsystem easier to use.",
        "type": "Structural",
        "image": "/images/design_pattern/gof_facade.png",
    },
    {
        "name": "Prototype",
        "definition": "Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.",
        "type": "Creational",
        "image": "/images/design_pattern/gof_prototype.png",
    },
    {
        "name": "Flyweight",
        "definition": "Use sharing to support large numbers of fine grained objects efficiently.",
        "type": "Structural",
        "image": "/images/design_pattern/gof_flyweight.png",
    },
    {
        "name": "Singleton",
        "definition": "Ensure a class only has one instance and provide a global point of access to it.",
        "type": "Creational",
        "image": "/images/design_pattern/gof_singleton.png",
    },
]
